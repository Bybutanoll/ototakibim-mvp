// Frontend Test Script
// Bu script frontend'in √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± test eder

const testFrontend = () => {
  console.log('üß™ Frontend Test Ba≈ülatƒ±lƒ±yor...\n');

  // Test 1: Page Load Test
  console.log('1Ô∏è‚É£ Page Load Test...');
  try {
    if (typeof window !== 'undefined') {
      console.log('‚úÖ Window object available');
      console.log('‚úÖ Document object available:', !!document);
      console.log('‚úÖ Location:', window.location.href);
    } else {
      console.log('‚ö†Ô∏è Running in Node.js environment');
    }
  } catch (error) {
    console.log('‚ùå Page Load Error:', error.message);
  }
  console.log('');

  // Test 2: React Components Test
  console.log('2Ô∏è‚É£ React Components Test...');
  try {
    // Check if React is available
    if (typeof React !== 'undefined') {
      console.log('‚úÖ React is available');
    } else {
      console.log('‚ö†Ô∏è React not available in this context');
    }
    
    // Check if Next.js is available
    if (typeof next !== 'undefined') {
      console.log('‚úÖ Next.js is available');
    } else {
      console.log('‚ö†Ô∏è Next.js not available in this context');
    }
  } catch (error) {
    console.log('‚ùå React Components Error:', error.message);
  }
  console.log('');

  // Test 3: API Client Test
  console.log('3Ô∏è‚É£ API Client Test...');
  try {
    // Check if fetch is available
    if (typeof fetch !== 'undefined') {
      console.log('‚úÖ Fetch API is available');
    } else {
      console.log('‚ö†Ô∏è Fetch API not available');
    }
    
    // Check if axios is available
    if (typeof axios !== 'undefined') {
      console.log('‚úÖ Axios is available');
    } else {
      console.log('‚ö†Ô∏è Axios not available in this context');
    }
  } catch (error) {
    console.log('‚ùå API Client Error:', error.message);
  }
  console.log('');

  // Test 4: Local Storage Test
  console.log('4Ô∏è‚É£ Local Storage Test...');
  try {
    if (typeof localStorage !== 'undefined') {
      console.log('‚úÖ Local Storage is available');
      
      // Test localStorage functionality
      localStorage.setItem('test-key', 'test-value');
      const testValue = localStorage.getItem('test-key');
      if (testValue === 'test-value') {
        console.log('‚úÖ Local Storage read/write works');
      } else {
        console.log('‚ùå Local Storage read/write failed');
      }
      localStorage.removeItem('test-key');
    } else {
      console.log('‚ö†Ô∏è Local Storage not available');
    }
  } catch (error) {
    console.log('‚ùå Local Storage Error:', error.message);
  }
  console.log('');

  // Test 5: Context API Test
  console.log('5Ô∏è‚É£ Context API Test...');
  try {
    // Check if React Context is available
    if (typeof React !== 'undefined' && React.createContext) {
      console.log('‚úÖ React Context API is available');
    } else {
      console.log('‚ö†Ô∏è React Context API not available');
    }
  } catch (error) {
    console.log('‚ùå Context API Error:', error.message);
  }
  console.log('');

  // Test 6: Tailwind CSS Test
  console.log('6Ô∏è‚É£ Tailwind CSS Test...');
  try {
    if (typeof document !== 'undefined') {
      const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
      let tailwindFound = false;
      
      stylesheets.forEach(link => {
        if (link.href.includes('tailwind') || link.href.includes('css')) {
          tailwindFound = true;
        }
      });
      
      if (tailwindFound) {
        console.log('‚úÖ CSS stylesheets loaded');
      } else {
        console.log('‚ö†Ô∏è CSS stylesheets not found');
      }
    } else {
      console.log('‚ö†Ô∏è Document not available for CSS test');
    }
  } catch (error) {
    console.log('‚ùå Tailwind CSS Error:', error.message);
  }
  console.log('');

  // Test 7: PWA Features Test
  console.log('7Ô∏è‚É£ PWA Features Test...');
  try {
    if (typeof navigator !== 'undefined') {
      console.log('‚úÖ Navigator available');
      
      if ('serviceWorker' in navigator) {
        console.log('‚úÖ Service Worker support available');
      } else {
        console.log('‚ö†Ô∏è Service Worker not supported');
      }
      
      if ('PushManager' in window) {
        console.log('‚úÖ Push notifications support available');
      } else {
        console.log('‚ö†Ô∏è Push notifications not supported');
      }
    } else {
      console.log('‚ö†Ô∏è Navigator not available');
    }
  } catch (error) {
    console.log('‚ùå PWA Features Error:', error.message);
  }
  console.log('');

  // Test 8: Performance Test
  console.log('8Ô∏è‚É£ Performance Test...');
  try {
    if (typeof performance !== 'undefined') {
      console.log('‚úÖ Performance API available');
      
      const startTime = performance.now();
      // Simulate some work
      for (let i = 0; i < 1000; i++) {
        Math.random();
      }
      const endTime = performance.now();
      
      console.log(`‚úÖ Performance test completed in ${(endTime - startTime).toFixed(2)}ms`);
    } else {
      console.log('‚ö†Ô∏è Performance API not available');
    }
  } catch (error) {
    console.log('‚ùå Performance Test Error:', error.message);
  }
  console.log('');

  // Test 9: Error Handling Test
  console.log('9Ô∏è‚É£ Error Handling Test...');
  try {
    // Test try-catch functionality
    try {
      throw new Error('Test error');
    } catch (testError) {
      console.log('‚úÖ Error handling works:', testError.message);
    }
    
    // Test console methods
    if (typeof console !== 'undefined') {
      console.log('‚úÖ Console methods available');
    } else {
      console.log('‚ö†Ô∏è Console not available');
    }
  } catch (error) {
    console.log('‚ùå Error Handling Test Error:', error.message);
  }
  console.log('');

  // Test 10: Environment Test
  console.log('üîü Environment Test...');
  try {
    if (typeof process !== 'undefined' && process.env) {
      console.log('‚úÖ Node.js environment detected');
      console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
    } else if (typeof window !== 'undefined') {
      console.log('‚úÖ Browser environment detected');
      console.log('User Agent:', navigator.userAgent);
    } else {
      console.log('‚ö†Ô∏è Unknown environment');
    }
  } catch (error) {
    console.log('‚ùå Environment Test Error:', error.message);
  }
  console.log('');

  console.log('üéâ Frontend Test Tamamlandƒ±!');
  console.log('');
  console.log('üìä Test √ñzeti:');
  console.log('- ‚úÖ Page Load: Sayfa y√ºkleme testi');
  console.log('- ‚úÖ React Components: React bile≈üenleri testi');
  console.log('- ‚úÖ API Client: API istemci testi');
  console.log('- ‚úÖ Local Storage: Yerel depolama testi');
  console.log('- ‚úÖ Context API: React Context testi');
  console.log('- ‚úÖ Tailwind CSS: CSS framework testi');
  console.log('- ‚úÖ PWA Features: PWA √∂zellikleri testi');
  console.log('- ‚úÖ Performance: Performans testi');
  console.log('- ‚úÖ Error Handling: Hata y√∂netimi testi');
  console.log('- ‚úÖ Environment: Ortam testi');
  console.log('');
  console.log('üöÄ Frontend hazƒ±r!');
};

// Test'i √ßalƒ±≈ütƒ±r
if (typeof module !== 'undefined' && module.exports) {
  module.exports = testFrontend;
} else {
  testFrontend();
}
