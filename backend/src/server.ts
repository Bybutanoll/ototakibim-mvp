import app from './app';
import { connectDB } from './config/database';
import { handleUnhandledRejection, handleUncaughtException } from './middleware/errorHandler';
import { createServer } from 'http';
import dotenv from 'dotenv';

dotenv.config();

// Handle uncaught exceptions and unhandled rejections
handleUncaughtException();
handleUnhandledRejection();

const DEFAULT_PORT = parseInt(process.env.PORT || '5000');
const FALLBACK_PORTS = [5001, 5002, 5003];

let globalServer: any = null;

const tryPort = (port: number): Promise<boolean> => {
  return new Promise((resolve) => {
    const server = createServer(app);
    globalServer = server; // Global server referansƒ±
    
    server.listen(port, () => {
      console.log(`‚úÖ Backend ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!`);
      console.log(`üîß Port: ${port}`);
      console.log(`üì± Frontend: http://localhost:3000`);
      console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üìä Health Check: http://localhost:${port}/api/health`);
      console.log(`üìä API Docs: http://localhost:${port}/api`);
      resolve(true);
    });
    
    server.on('error', (err: any) => {
      if (err.code === 'EADDRINUSE') {
        console.log(`‚ùå Port ${port} kullanƒ±mda, ba≈üka port deneniyor...`);
        resolve(false);
      } else {
        console.error(`‚ùå Port ${port} hatasƒ±:`, err.message);
        resolve(false);
      }
    });
  });
};

const startServer = async () => {
  try {
    console.log('üöÄ OtoTakibim Backend ba≈ülatƒ±lƒ±yor...');
    
    // MongoDB baƒülantƒ±sƒ± (opsiyonel)
    await connectDB();
    
    // Ana port'u dene
    let started = await tryPort(DEFAULT_PORT);
    
    // Ana port √ßalƒ±≈ümazsa fallback'leri dene
    if (!started) {
      for (const port of FALLBACK_PORTS) {
        started = await tryPort(port);
        if (started) break;
      }
    }

    if (!started) {
      console.error('‚ùå Hi√ßbir port bulunamadƒ±! T√ºm portlar kullanƒ±mda.');
      console.log('üí° √á√∂z√ºm: npm run kill-ports komutunu √ßalƒ±≈ütƒ±rƒ±n');
      process.exit(1);
    }

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('üõë SIGTERM sinyali alƒ±ndƒ±, server kapatƒ±lƒ±yor...');
      if (globalServer) {
        globalServer.close(() => {
          console.log('‚úÖ Server kapatƒ±ldƒ±');
          process.exit(0);
        });
      }
    });

    process.on('SIGINT', () => {
      console.log('üõë SIGINT sinyali alƒ±ndƒ±, server kapatƒ±lƒ±yor...');
      if (globalServer) {
        globalServer.close(() => {
          console.log('‚úÖ Server kapatƒ±ldƒ±');
          process.exit(0);
        });
      }
    });

  } catch (error) {
    console.error('‚ùå Server ba≈ülatma hatasƒ±:', error);
    process.exit(1);
  }
};

// Graceful shutdown handlers are now in startServer function

startServer();
